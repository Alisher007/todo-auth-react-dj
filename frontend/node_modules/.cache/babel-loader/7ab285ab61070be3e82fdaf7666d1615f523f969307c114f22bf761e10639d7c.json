{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000/api/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n  if (typeof error.response === 'undefined') {\n    alert('A server/network error occurred. ' + 'Looks like CORS might be the problem. ' + 'Sorry about this - we will get it fixed shortly.');\n    return Promise.reject(error);\n  }\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n    console.log(refreshToken, ' ################# refreshToken');\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n      // exp date in token is expressed in seconds, while now() returns milliseconds:\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = 'JWT ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'JWT ' + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n  }\n\n  // specific error handling done elsewhere\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","alert","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken","console","log","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","exp","post","refresh","then","setItem","access","defaults","catch","err"],"sources":["/home/alisher/djangoprojects/labs/todo-auth-react-dj/frontend/src/axios.js"],"sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'http://127.0.0.1:8000/api/';\n\nconst axiosInstance = axios.create({\n\tbaseURL: baseURL,\n\ttimeout: 5000,\n\theaders: {\n\t\tAuthorization: localStorage.getItem('access_token')\n\t\t\t? 'JWT ' + localStorage.getItem('access_token')\n\t\t\t: null,\n\t\t'Content-Type': 'application/json',\n\t\taccept: 'application/json',\n\t},\n});\n\naxiosInstance.interceptors.response.use(\n\t(response) => {\n\t\treturn response;\n\t},\n\tasync function (error) {\n\t\tconst originalRequest = error.config;\n\n\t\tif (typeof error.response === 'undefined') {\n\t\t\talert(\n\t\t\t\t'A server/network error occurred. ' +\n\t\t\t\t\t'Looks like CORS might be the problem. ' +\n\t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\n\t\t\t);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.status === 401 &&\n\t\t\toriginalRequest.url === baseURL + 'token/refresh/'\n\t\t) {\n\t\t\twindow.location.href = '/login/';\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.data.code === 'token_not_valid' &&\n\t\t\terror.response.status === 401 &&\n\t\t\terror.response.statusText === 'Unauthorized'\n\t\t) {\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n\t\t\tconsole.log(refreshToken, ' ################# refreshToken');\n\n\t\t\tif (refreshToken) {\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n\t\t\t\tconsole.log(tokenParts.exp);\n\n\t\t\t\tif (tokenParts.exp > now) {\n\t\t\t\t\treturn axiosInstance\n\t\t\t\t\t\t.post('/token/refresh/', {\n\t\t\t\t\t\t\trefresh: refreshToken,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n\t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n\n\t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\n\t\t\t\t\t\t\treturn axiosInstance(originalRequest);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n\t\t\t\t\twindow.location.href = '/login/';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('Refresh token not available.');\n\t\t\t\twindow.location.href = '/login/';\n\t\t\t}\n\t\t}\n\n\t\t// specific error handling done elsewhere\n\t\treturn Promise.reject(error);\n\t}\n);\n\nexport default axiosInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}